Project-directory/
|--public/
|    |-- index.html
       <!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Registration</title>
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f5f5f5;
      margin: 0;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }

    .registration-container {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
      margin-bottom: 15px;
    }

    label {
      font-size: 14px;
      font-weight: 600;
      display: block;
      margin-bottom: 5px;
    }

    input {
      width: 100%;
      padding: 10px;
      box-sizing: border-box;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 14px;
    }

    button {
      background-color: #007bff;
      color: white;
      padding: 10px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      font-weight: 600;
    }
  </style>
</head>

<body>
  <div class="registration-container">
    <h2>User Registration</h2>
    <form id="registrationForm">
      <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required>
      </div>

      <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
      </div>

      <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
      </div>

      <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <input type="password" id="confirmPassword" name="confirmPassword" required>
      </div>

      <button type="submit">Register</button>
    </form>

    <hr>

    <h2>User Login</h2>
    <form id="loginForm">
      <div class="form-group">
        <label for="loginUsername">Username:</label>
        <input type="text" id="loginUsername" name="loginUsername" required>
      </div>

      <div class="form-group">
        <label for="loginPassword">Password:</label>
        <input type="password" id="loginPassword" name="loginPassword" required>
      </div>

      <button type="button" onclick="login()">Login</button>
    </form>
  </div>

  <script>
    function login() {
      const loginUsername = document.getElementById('loginUsername').value;
      const loginPassword = document.getElementById('loginPassword').value;
      alert(Login Details:\nUsername: ${loginUsername}\nPassword: ${loginPassword});
    }
  </script>
</body>

</html>


|      |-- styles.css
       body {
  font-family: 'Inter', sans-serif;
  background-color: #f5f5f5;
  margin: 0;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.registration-container {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  max-width: 400px;
  width: 100%;
}

h2 {
  color: #333;
  font-size: 24px;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
}

label {
  font-size: 14px;
  font-weight: 600;
  display: block;
  margin-bottom: 5px;
  color: #333;
}

input {
  width: 100%;
  padding: 10px;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
}

button {
  background-color: #007bff;
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  font-weight: 600;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #0056b3;
}

hr {
  border: 1px solid #ccc;
  margin: 20px 0;
}

/* Style for login form */
#loginForm {
  margin-top: 20px;
}

|      |-- server.js 
    java script 
  const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

// Use body-parser middleware to parse POST request bodies
app.use(bodyParser.urlencoded({ extended: true }));

// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, 'public')));

// In-memory storage for registered users
const registeredUsers = [];

// Endpoint to handle user registration
app.post('/register', (req, res) => {
    const { username, email, password, confirmPassword } = req.body;

    // Basic validation
    if (!username || !email || !password || password !== confirmPassword) {
        return res.status(400).send('Invalid registration data');
    }

    // Check if the username is already taken
    if (registeredUsers.some(user => user.username === username)) {
        return res.status(400).send('Username already taken');
    }

    // Store the user in memory (for demonstration purposes)
    registeredUsers.push({ username, email, password });

    res.status(200).send('Registration successful');
});

// Endpoint to handle user login
app.post('/login', (req, res) => {
    const { loginUsername, loginPassword } = req.body;

    // Check if the user exists in the registered users array
    const user = registeredUsers.find(u => u.username === loginUsername && u.password === loginPassword);

    if (user) {
        res.status(200).send('Login successful');
    } else {
        res.status(401).send('Invalid login credentials');
    }
});

// Start the server
app.listen(port, () => {
    console.log(Server is running at http://localhost:${port});
})


|    |--  script.js
document.addEventListener('DOMContentLoaded', () => {
    const registrationForm = document.getElementById('registrationForm');
    const loginForm = document.getElementById('loginForm');

    registrationForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        const formData = new FormData(registrationForm);
        const response = await fetch('/register', {
            method: 'POST',
            body: formData
        });

        const result = await response.text();
        alert(result);
    });

    loginForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        const formData = new FormData(loginForm);
        const response = await fetch('/login', {
            method: 'POST',
            body: formData
        });

        const result = await response.text();
        alert(result);
    });
});


|   |--npm  install  body- parser 

|   |-- npm  install mysql 

server to database
const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const mysql = require('mysql');

const app = express();
const port = 3000;

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// MySQL database connection
const connection = mysql.createConnection({
    host: 'your_database_host',
    user: 'your_database_user',
    password: 'your_database_password',
    database: 'your_database_name',
});

connection.connect((err) => {
    if (err) {
        console.error('Error connecting to database:', err);
        return;
    }
    console.log('Connected to database');
});

// ... (Other code remains the same)

// Endpoint to handle user registration
app.post('/register', (req, res) => {
    const { username, email, password, confirmPassword } = req.body;

    // Basic validation
    if (!username || !email || !password || password !== confirmPassword) {
        return res.status(400).send('Invalid registration data');
    }

    // Check if the username or email is already taken
    const checkDuplicateQuery = 'SELECT * FROM users WHERE username = ? OR email = ?';
    connection.query(checkDuplicateQuery, [username, email], (error, results) => {
        if (error) {
            console.error('Error checking duplicate:', error);
            return res.status(500).send('Internal Server Error');
        }

        if (results.length > 0) {
            return res.status(400).send('Username or email already taken');
        }

        // Store the user in the database
        const insertUserQuery = 'INSERT INTO users (username, email, password) VALUES (?, ?, ?)';
        connection.query(insertUserQuery, [username, email, password], (insertError) => {
            if (insertError) {
                console.error('Error inserting user:', insertError);
                return res.status(500).send('Internal Server Error');
            }

            res.status(200).send('Registration successful');
        });
    });
});

// Endpoint to handle user login
app.post('/login', (req, res) => {
    const { loginUsername, loginPassword } = req.body;

    // Check if the user exists in the database
    const checkLoginQuery = 'SELECT * FROM users WHERE username = ? AND password = ?';
    connection.query(checkLoginQuery, [loginUsername, loginPassword], (error, results) => {
        if (error) {
            console.error('Error checking login:', error);
            return res.status(500).send('Internal Server Error');
        }

        if (results.length > 0) {
            res.status(200).send('Login successful');
        } else {
            res.status(401).send('Invalid login credentials');
        }
    });
});

// Start the server
app.listen(port, () => {
    console.log(Server is running at http://localhost:${port});
})


       
